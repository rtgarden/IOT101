New to GitHub:
==============

start out by getting a github account,

Install github on your desktop

using the spoon-knife repository (tutorial) on github 

https://github.com/octocat/Spoon-Knife

go ahead and fork the repository and make a clone in your desktop.

You will need to become familiar with several basic concepts like:

forking, cloning, commits, pull requests and swim lanes.

used on the github site as we are using this distributed site as a base.

You will need to use a terminal also for command line interactions.

To join IOT101:
================

Locate the connectIOT project github profile:

follow the connectIOT project

watch and star the IOT101 repository

fork the 101 repository,

clone it to your desktop.

You now have your own local remote copy of the collective textbook.

configure remotes:
==================

generally you want to create an upstream master and a working branch of a repository

this way the original repository is set as the "master" 

this is generally done in the terminal using: 

* $ git remote add upstream *

the upstream master is like a pristine "version" and is often used in software version control.

If you do not expect to contribute to the project simply cloning the repository and configuring

the upstream master to git fetch is probably enough.

For IOT101 contributing, experimenting, and branching are encouraged.

Creating another branch from the copy in your local repository you can use your own

two copies to maintain a personal master copy of the repository and a local working version of the repository.

Git Fetch
=========

When you want to update your master with material from the connect IOT master repository you will use

terminal:

* $ git fetch upstream *

this will pull in changes not present in your local repository without modifying your files

in order to merge the changes and alter your repository with the changes:

terminal:

* $ git merge upstream/master *

This will merge the changes into your local master copy.


Distributed Collaboration using branches
========================================

Branches are quite flexible and they can be used to organize collaboration.

Branches can be used to seperate material into sections similar to chapters, 

The system of collaboration can also be shaped by how branches are shared, 

Subject categories and appendix lists can be created and shared through branching

allowing for the creation of a detailed reference which can have many editors and proof readers.

Swim Lanes
==========

Network visualization means you can follow along with each branch using the swim lane branching visualization.

Eac branch has its own lane and there are indicators of its relationship to the master version

The Textbook That updates itself:
==================================

Using git fetch to keep up with commits you can follow along as we update the textbook

in order to do the git fetch you will need to use your terminal (many operations can be done in terminal).


The textbook you help create:
==============================

Using pull requests you can contribute to the collaborative effort, 

There are many ways to contribute to the overall effort, even simply helping correct simple errors.





More resources:
===============

https://help.github.com/

http://training.github.com/

http://wiki.freegeek.org/index.php/Git_for_dummies
